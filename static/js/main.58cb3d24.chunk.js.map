{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","className","src","this","props","business","imageSrc","alt","name","address","city","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","term","location","sortBy","handleSearch","bind","handleTermChange","handleLocationChange","sortByOptions","sortByOption","setState","event","target","value","searchYelp","preventDefault","Object","keys","i","sortByOptionValue","getSortByClass","onClick","handleSortByChange","class","renderSortByOptions","onChange","placeholder","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58cb3d24.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css'\n\n\n/* const business = {\n    imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n    name: 'MarginOtto Pizzeria',\n    address: '1010 Paddington Way',\n    city: 'Flavortown',\n    state: 'NY',\n    zipCode: '10101',\n    category: 'Italian',\n    rating: 4.5,\n    reviewCount: 90\n} */\n\nclass Business extends React.Component {\n    render(){\n        return(\n            <div className=\"Business\">\n                <div className=\"image-container\">\n                    <img src={this.props.business.imageSrc} alt=''/>\n                </div>\n                <h2>{this.props.business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                        <p>{this.props.business.address}</p>\n                        <p>{this.props.business.city}</p>\n                        <p>{this.props.business.state}{this.props.business.zipCode}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                        <h3>{this.props.business.category}</h3>\n                        <h3 className=\"rating\">{this.props.business.rating}</h3>\n                        <p>{this.props.business.reviewCount}</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css'\nimport Business from '../Business/Business'\n\nclass BusinessList extends React.Component {\n    render(){\n        return(\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses.map( business => <Business key={business.id} business={business} />)\n                }\n            </div>\n        )\n    }\n}\n\nexport default BusinessList;","import React from 'react';\nimport './SearchBar.css';\n\n\n\nclass SearchBar extends React.Component {\n    constructor(props){\n        super(props)\n        this.state={\n            term: '',\n            location: '',\n            sortBy: 'best_match'\n\n        }\n\n        this.handleSearch = this.handleSearch.bind(this)\n        this.handleTermChange = this.handleTermChange.bind(this)\n        this.handleLocationChange = this.handleLocationChange.bind(this)\n        \n        this.sortByOptions = {\n            'Best Match': 'best_match',\n            'Highest Rated': 'rating',\n            'Most Reviewd': 'review_count'\n        }\n\n    }\n\n    getSortByClass(sortByOption) {\n        if(this.state.sortBy === sortByOption) {\n            return 'active'\n        }else{\n            return ''\n        }\n    }\n\n    handleSortByChange(sortByOption) {\n        this.setState({sortBy: sortByOption})\n    }\n\n    handleTermChange(event) {\n        this.setState({ term: event.target.value})\n    }\n\n    handleLocationChange(event) {\n        this.setState({ location: event.target.value})\n    }\n\n    handleSearch(event) {\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy)\n        event.preventDefault()\n    }\n\n    renderSortByOptions(){\n        return Object.keys(this.sortByOptions).map((sortByOption, i) => {\n            let sortByOptionValue = this.sortByOptions[sortByOption];\n            return <li className={this.getSortByClass(sortByOptionValue)} key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)}>{sortByOption}</li>;\n        });\n    }\n\n    render(){\n        return(\n            <div className=\"SearchBar\">\n                <div class=\"SearchBar-sort-options\">\n                    <ul>\n                     {this.renderSortByOptions()}\n                    </ul>\n                </div>\n                <div className=\"SearchBar-fields\">\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n                    <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n                </div>\n                <div className=\"SearchBar-submit\">\n                    <a onClick={this.handleSearch}>Let's Go</a>\n                </div>\n            </div>\n        )\n    }\n    \n    \n}\n\nexport default SearchBar;","const apiKey = 'WfRuVxDHRfaNykkIse1QzmZdhOMJNajUgpwbPEdwsabLrtBlSDEoe6FotL0jv9fejl1vQ0ZPrZrYgh3rvsr0HfYyF78HVW58wNLUKBd6_qYiJYvUmPNoxhdkzWHSXnYx'\n\nconst Yelp = {\n    \n    searchYelp(term, location, sortBy){\n        \n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}`\n            }\n        })\n        .then(response => response.json())\n        .then(jsonResponse => {\n            if(jsonResponse.businesses) {\n                return jsonResponse.businesses.map(business => { return {\n                    id: business.id,\n                    imageSrc: business.image_url,\n                    name:business.name,\n                    address:business.location.address1,\n                    city: business.location.city,\n                    state:business.location.zip_code,\n                    category: business.categories[0].title,\n                    rating: business.rating,\n                    reviewCount: business.review_count\n                }})\n            }\n        })\n    }\n}\n\nexport default Yelp;\n","import React from 'react';\n/* import logo from '../../logo.svg'; */\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList'\nimport SearchBar from '../SearchBar/SearchBar'\nimport Yelp from '../../util/Yelp'\n\n/* const business = {\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'MarginOtto Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n} */\n\n/* const businessesArray =[ business, business, business, business, business, business,] */\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      businesses: []\n    }\n    this.searchYelp = this.searchYelp.bind(this)\n  }\n\n  searchYelp(term, location, sortBy) {\n    /* console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`) */\n    Yelp.searchYelp(term, location, sortBy)\n      .then( businesses => this.setState({ businesses: businesses}))\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar searchYelp={this.searchYelp}/>\n        <BusinessList businesses={this.state.businesses} /> \n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}